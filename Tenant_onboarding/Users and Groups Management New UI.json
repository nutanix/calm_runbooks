{"status":{},"spec":{"name":"Users and Groups Management New UI","description":"","resources":{"runbook":{"name":"d26c4e78_runbook","description":"","task_definition_list":[{"type":"DAG","name":"82a50272_dag","description":"","attrs":{"type":"","edges":[{"type":"","from_task_reference":{"name":"Parameter Validation","kind":"app_task"},"to_task_reference":{"name":"Users and Groups Management","kind":"app_task"},"edge_type":"user_defined"}]},"child_tasks_local_reference_list":[{"name":"Parameter Validation","kind":"app_task"},{"name":"Users and Groups Management","kind":"app_task"}],"variable_list":[],"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"SET_VARIABLE","name":"Parameter Validation","description":"","attrs":{"type":"","script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\n#user_items = @@{user_items}@@\nPC_IP = \"@@{PC_IP}@@\"\npc_user = \"@@{prism_central_username}@@\"\npc_password = \"@@{prism_central_passwd}@@\"\n\ndef get_directory_uuid(domain_name):\n    url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/directory_services\/list\".format(PC_IP)\n    data = requests.post(url, json={\"kind\":\"directory_service\"},\n                        auth=HTTPBasicAuth(pc_user,pc_password),\n                        timeout=None, verify=False)\n    if not data.ok:\n        print(\"Error while fetching active directory details.\", data.json().get(\"message_list\", \n                                                                data.json().get(\"error_details\", \n                                                                data.json())))\n        exit(1)\n    else:\n        if data.json()['metadata']['total_matches'] == 0:\n            print(\"No active directories present on host - %s\"%PC_IP)\n            exit(1)\n        else:\n            for _directory in data.json()['entities']:\n                if _directory['status']['resources']['domain_name'] == domain_name:\n                    return _directory['metadata']['uuid']\n            return \"Directory_not_present\"\n          \ndef get_project_uuid(name):\n    url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/projects\/list\".format(PC_IP)\n    data = requests.post(url,json={\"kind\":\"project\", \"filter\":\"name==%s\"%name},\n                        auth=HTTPBasicAuth(pc_user,pc_password),\n                        timeout=None, verify=False)\n    if not data.ok:\n        print(\"Error while fetching Project details.\", data.json().get(\"message_list\", \n                                                       data.json().get(\"error_details\", \n                                                       data.json())))\n        exit(1)\n    else:\n        if data.json()['metadata']['total_matches'] == 0:\n            print(\"%s Project not present on %s\"%(name, PC_IP))\n            exit(1)\n        else:\n            return data.json()['entities'][0]['metadata']['uuid']\n          \nadmin_users = @@{admin_users}@@\nadmin_groups = @@{admin_groups}@@\ndev_users = @@{developer_users}@@\ndev_groups = @@{developer_groups}@@\nconsumer_users = @@{consumer_users}@@\nconsumer_groups = @@{consumer_groups}@@\noperator_users = @@{operator_users}@@\noperator_groups = @@{operator_groups}@@\noperation = \"@@{operation}@@\"\n\nusers_list = [admin_users, dev_users, consumer_users, operator_users]\ngroups_list = [admin_groups, dev_groups, consumer_groups, operator_groups]\nparams = {}\nparams[\"tenant_users\"] = []\nparams[\"tenant_group\"] = []\nfor _index,value in enumerate(users_list):\n    search = admin_users\n    _user_type = \"admin\"\n    if _index == 1:\n        search = dev_users\n        _user_type = \"developer\"\n    elif _index == 2:\n        search = consumer_users\n        _user_type = \"consumer\"\n    elif _index == 3:\n        search = operator_users\n        _user_type = \"operator\"\n    if search != \"None\":\n        _user_list = []\n        for _user in value.split(\",\"):\n            _user_list.append(_user.strip())\n        params[\"tenant_users\"].append({_user_type:_user_list})\n        \nfor _index,value in enumerate(groups_list):\n    search = admin_groups\n    _user_type = \"admin\"\n    if _index == 1:\n        search = dev_groups\n        _user_type = \"developer\"\n    elif _index == 2:\n        search = consumer_groups\n        _user_type = \"consumer\"\n    elif _index == 3:\n        search = operator_groups\n        _user_type = \"operator\"\n    if search != \"None\":\n        _user_list = []\n        for _user in value.split(\",\"):\n            _user_list.append(_user.strip())\n        params[\"tenant_group\"].append({_user_type:_user_list})\n        \nparams[\"directory_uuid\"] = get_directory_uuid(\"@@{active_directory_domain}@@\")\nparams[\"project_details\"] = {\"name\":\"@@{project_name}@@\", \n                             \"uuid\":get_project_uuid(\"@@{project_name}@@\")}\nprint(\"user_items={}\".format(params))\n","script_type":"static_py3","exit_status":[],"eval_scope":"local","eval_variables":["user_items"]},"child_tasks_local_reference_list":[],"variable_list":[],"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Users and Groups Management","description":"","attrs":{"type":"","script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\n\ndef _build_url(scheme, resource_type, host=\"@@{PC_IP}@@\", **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n    \ndef get_role_uuid(role_name):\n    api_url = 'https:\/\/{}:9440\/api\/nutanix\/v3\/roles\/list'.format(\"@@{PC_IP}@@\")\n    payload = {\n      'filter': 'name=={}'.format(role_name),\n      'kind': 'role',\n      'offset': 0\n    }\n    r = requests.post(api_url, json=payload, \n                    auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                       \"@@{prism_central_passwd}@@\"), \n                    timeout=None, verify=False)\n    if r.json().get('entities', 'None') != 'None':\n        return r.json()['entities'][0]['metadata']['uuid']\n    else:\n        print(\"Error :- {}\".format(r.content))\n        exit(1)\n        \ndef _get_spec(name=None, uuid=None):\n    if uuid != \"None\":\n        url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects_internal\/{}\".format(uuid))\n        data = requests.get(url,\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)\n        return data.json()\n    else:\n        url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects\/{}\".format(name))\n        data = requests.post(url, json={\"kind\": \"project\", \"filter\":\"name==%s\"%name},\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)\n        return data.json()\n  \ndef update_project(**params):\n    project = params['project_details']\n    if project.get('uuid', 'None') == 'None' and project.get('name', 'None') == 'None':\n        print(\"Input Error ----> Please provide project name or project uuid.\")\n\n    user_list = []\n    if params.get(\"tenant_users\", []) != []:\n        users = []\n        for x in range(len(params['tenant_users'])):\n            users.append(params['tenant_users'][x].get(\"admin\",\\\n                      params['tenant_users'][x].get('operator',\\\n                      params['tenant_users'][x].get('developer',\\\n                      params['tenant_users'][x].get('consumer')))))\n        for user in users:\n            for _user in user:\n                user_list.append(create_user(_user, **params))\n        if \"@@{operation}@@\" in [\"add_user\",\"update\"]:\n            spec = _get_project_spec(uuid=project.get('uuid', 'None'))\n            for x in ['categories', 'categories_mapping', 'creation_time', 'last_update_time', 'owner_reference']:\n                del spec['metadata'][x]\n            del spec['status']\n            for add_user in user_list:\n                spec['spec']['resources']\\\n                    ['user_reference_list'].append({\"kind\": \"user\",'uuid': add_user['uuid']})\n            _url = _build_url(scheme=\"https\",resource_type=\"\/projects\/%s\"%project['uuid']) \n            _data = requests.put(_url, json=spec,\n                                 auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                                    \"@@{prism_central_passwd}@@\"),\n                                 timeout=None, verify=False)\n            wait_for_completion(_data)\n\n    group_list = []\n    if params.get(\"tenant_group\", []) != []:\n        group = []\n        for x in range(len(params['tenant_group'])):\n            group.append(params['tenant_group'][x].get(\"admin\",\\\n                      params['tenant_group'][x].get('operator',\\\n                      params['tenant_group'][x].get('developer',\\\n                      params['tenant_group'][x].get('consumer')))))\n        for group in group:\n            for _group in group:\n                group_list.append(create_group(_group, **params))\n        if \"@@{operation}@@\" in [\"add_user\",\"update\"]:\n            spec = _get_project_spec(uuid=project.get('uuid', 'None'))\n            for x in ['categories', 'categories_mapping', 'creation_time', 'last_update_time', 'owner_reference']:\n                del spec['metadata'][x]\n            del spec['status']\n            for add_user in group_list:\n                spec['spec']['resources']\\\n                    ['external_user_group_reference_list'].append(\\\n                                        {\"kind\": \"user_group\",'uuid': add_user['uuid']})\n            _url = _build_url(scheme=\"https\",resource_type=\"\/projects\/%s\"%project['uuid']) \n            _data = requests.put(_url, json=spec,\n                                 auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                                    \"@@{prism_central_passwd}@@\"),\n                                 timeout=None, verify=False)\n            wait_for_completion(_data)\n            \n    payload = _get_spec(name=project.get('name', None),uuid=project.get('uuid', 'None'))\n    for x in ['categories', 'categories_mapping', 'creation_time', 'last_update_time', 'owner_reference']:\n        del payload['metadata'][x]\n    del payload['status']\n    \n    _colaboration = \"SELF_OWNED\"\n    if len(payload['spec']['access_control_policy_list'])>0:\n        if payload['spec']['access_control_policy_list'][0]['acp']['resources']\\\n            ['filter_list']['context_list'][0]['entity_filter_expression_list']\\\n            [0]['right_hand_side']['collection'] == \"ALL\":\n            _colaboration = \"ALL\"\n    for x in range(len(payload['spec']['access_control_policy_list'])):\n        payload['spec']['access_control_policy_list'][x]['operation'] = \"UPDATE\"\n    if params.get('tenant_users', 'None') != 'None':\n        for role in params['tenant_users']:\n            for x in range(len(payload['spec']['access_control_policy_list'])):\n                append = True\n                acp = {}\n                if \"admin\" in role.keys():\n                    if \"admin\" in payload['spec']['access_control_policy_list'][x]['acp']['description']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role[\"admin\"]:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_reference_list'].append(\\\n                                            {\"kind\":\"user\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"admin\", users=role[\"admin\"], \n                                           user_list=user_list, allow_colaboration=_colaboration)            \n                elif 'developer' in role.keys():\n                    if 'developer' in payload['spec']['access_control_policy_list'][x]['acp']['description']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['developer']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_reference_list'].append(\\\n                                            {\"kind\":\"user\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"developer\", users=role['developer'],\n                                           user_list=user_list, allow_colaboration=_colaboration)\n                                \n                elif 'operator' in role.keys():\n                    if 'operator' in payload['spec']['access_control_policy_list'][x]['acp']['description']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['operator']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_reference_list'].append(\\\n                                            {\"kind\":\"user\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"operator\", users=role['operator'],\n                                           user_list=user_list, allow_colaboration=_colaboration)\n                                \n                elif 'consumer' in role.keys():\n                    if 'consumer' in payload['spec']['access_control_policy_list'][x]['acp']['description']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['consumer']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_reference_list'].append(\\\n                                            {\"kind\":\"user\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"consumer\", users=role['consumer'],\n                                           user_list=user_list, allow_colaboration=_colaboration)\n                if append:\n                    payload['spec']['access_control_policy_list'].append(acp)\n                break\n\n    if params.get('tenant_group', 'None') != 'None':\n        for role in params['tenant_group']:\n            for x in range(len(payload['spec']['access_control_policy_list'])):\n                append = True\n                acp = {}\n                if \"admin\" in role.keys():\n                    if \"admin\" in payload['spec']['access_control_policy_list'][x]['acp']['description']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role[\"admin\"]:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_group_reference_list'].append(\\\n                                            {\"kind\":\"user_group\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"admin\", groups=role[\"admin\"],\n                                           group_list=group_list, allow_colaboration=_colaboration)\n                        \n                elif 'developer' in role.keys():\n                    if 'developer' in payload['spec']['access_control_policy_list'][x]['acp']['description']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['developer']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_group_reference_list'].append(\\\n                                            {\"kind\":\"user_group\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"developer\", groups=role['developer'],\n                                           group_list=group_list, allow_colaboration=_colaboration)                       \n                                \n                elif 'operator' in role.keys():\n                    if 'operator' in payload['spec']['access_control_policy_list'][x]['acp']['description']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['operator']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_group_reference_list'].append(\\\n                                            {\"kind\":\"user_group\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"operator\", groups=role['operator'],\n                                           group_list=group_list, allow_colaboration=_colaboration)\n                                \n                elif 'consumer' in role.keys():\n                    if 'consumer' in payload['spec']['access_control_policy_list'][x]['acp']['description']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['consumer']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_group_reference_list'].append(\\\n                                            {\"kind\":\"user_group\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"consumer\", groups=role['consumer'],\n                                           group_list=group_list, allow_colaboration=_colaboration)\n                if append:\n                    payload['spec']['access_control_policy_list'].append(acp)\n                break\n\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects_internal\/{}\".format(project['uuid']))\n    data = requests.put(url, json=payload,\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"Project updated successfully\")\n    \ndef wait_for_completion(data):\n    if data.status_code in [200, 202]:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(\n                                    \"@@{prism_central_username}@@\", \n                                    \"@@{prism_central_passwd}@@\"),\n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Got error ---> \",responce.json())\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = \"COMPLETE\"\n    else:\n        if \"DUPLICATE\" not in str(data.json()):\n            state = data.json().get('state')\n            print(\"Got %s ---> \"%state, data.json())\n            exit(1)\n\ndef generate_filter_list_admin(project_uuid, collection):\n    acl = []\n    acl.append({\"entity_filter_expression_list\":[\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"image\"},\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"marketplace_item\"},\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"directory_service\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"role\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"uuid_list\": [project_uuid]},\n                \"left_hand_side\": {\"entity_type\": \"project\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"user\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"user_group\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n                \"left_hand_side\": {\"entity_type\": \"environment\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"app_icon\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"category\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"app_task\"},\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"app_variable\"},\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n            },\n        ]})\n\n    acl.append({\n        \"scope_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": \"PROJECT\",\n                \"right_hand_side\": {\"uuid_list\": []},\n            }\n        ],\n        \"entity_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"ALL\"},\n                \"right_hand_side\": {\"collection\": collection},\n            }\n        ],\n    })\n    return acl\n\ndef generate_filter_list_operator(project_uuid, collection):\n    acl = []\n    acl.append({\"entity_filter_expression_list\":[\n        {\n            \"operator\": \"IN\",\n            \"right_hand_side\": {\"collection\": \"ALL\"},\n            \"left_hand_side\": {\"entity_type\": \"app_icon\"},\n        },\n        {\n            \"operator\": \"IN\",\n            \"right_hand_side\": {\"collection\": \"ALL\"},\n            \"left_hand_side\": {\"entity_type\": \"category\"},\n        },\n    ]})\n\n    acl.append({\n        \"scope_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": \"PROJECT\",\n                \"right_hand_side\": {\"uuid_list\": [project_uuid]},\n            }\n        ],\n        \"entity_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"ALL\"},\n                \"right_hand_side\": {\"collection\": collection},\n            }\n        ],\n    })\n    return acl   \n\ndef generate_filter_list_developer(project_uuid, collection):\n    acl = []\n    acl.append({\"entity_filter_expression_list\":[\n        {\n            \"operator\": \"IN\",\n            \"left_hand_side\": {\"entity_type\": \"image\"},\n            \"right_hand_side\": {\"collection\": \"ALL\"},\n        },\n        {\n            \"operator\": \"IN\",\n            \"left_hand_side\": {\"entity_type\": \"marketplace_item\"},\n            \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n        },\n        {\n            \"operator\": \"IN\",\n            \"right_hand_side\": {\"collection\": \"ALL\"},\n            \"left_hand_side\": {\"entity_type\": \"app_icon\"},\n        },\n        {\n            \"operator\": \"IN\",\n            \"right_hand_side\": {\"collection\": \"ALL\"},\n            \"left_hand_side\": {\"entity_type\": \"category\"},\n        },\n        {\n            \"operator\": \"IN\",\n            \"left_hand_side\": {\"entity_type\": \"app_task\"},\n            \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n        },\n        {\n            \"operator\": \"IN\",\n            \"left_hand_side\": {\"entity_type\": \"app_variable\"},\n            \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n        },\n    ]})\n\n    acl.append({\n        \"scope_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": \"PROJECT\",\n                \"right_hand_side\": {\"uuid_list\": [project_uuid]},\n            }\n        ],\n        \"entity_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"ALL\"},\n                \"right_hand_side\": {\"collection\": collection},\n            }\n        ],\n    })\n    return acl\n\ndef generate_filter_list_consumer(project_uuid, collection):\n    acl = []\n    acl.append({\"entity_filter_expression_list\":[\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"image\"},\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"marketplace_item\"},\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"app_icon\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"category\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"app_task\"},\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"app_variable\"},\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n            },\n        ]})\n    acl.append({\n        \"scope_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": \"PROJECT\",\n                \"right_hand_side\": {\"uuid_list\": [project_uuid]},\n            }\n        ],\n        \"entity_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"ALL\"},\n                \"right_hand_side\": {\"collection\": collection},\n            }\n        ]})\n    return acl \n  \ndef generate_acp(role, allow_colaboration=\"ALL\", users=None, groups=None, group_list=None, user_list=None):\n    user_details = @@{user_items}@@\n    project = user_details['project_details']\n    projectUuid = project['uuid']\n    admin_role_uuid = get_role_uuid(\"Project Admin\")\n    operator_role_uuid = get_role_uuid(\"Operator\")\n    developer_role_uuid = get_role_uuid(\"Developer\")\n    consumer_role_uuid = get_role_uuid(\"Consumer\")\n    \n    collection = \"SELF_OWNED\"\n    if allow_colaboration == \"ALL\":\n        collection = \"ALL\"\n    role_uuid = operator_role_uuid\n    filter_list = generate_filter_list_operator(projectUuid, collection)\n    if role == \"admin\":\n        role_uuid = admin_role_uuid\n        filter_list = generate_filter_list_admin(projectUuid, collection)\n    elif role == \"developer\":\n        role_uuid = developer_role_uuid\n        filter_list = generate_filter_list_developer(projectUuid, collection)\n    elif role == \"consumer\":\n        role_uuid = consumer_role_uuid\n        filter_list = generate_filter_list_consumer(projectUuid, collection)\n        \n    acp = {}\n    if groups == None:\n        _type = 'users'\n        user_reference_list = []\n        for _user in users:\n            for us in user_list:\n                if _user in us['name']:\n                    user_reference_list.append(\\\n                        {\"kind\":\"user\", \"uuid\": us['uuid']})\n        acp_list = {\n            'acp': {\n                'name': 'ACP-TENANT-{}-{}'.format(role,_type),\n                'resources': {\n                    'role_reference': {\n                        'kind': 'role',\n                        'uuid': role_uuid\n                        },\n                         \"user_reference_list\": user_reference_list,\n                         \"filter_list\": {'context_list': filter_list}\n                    },\n                    'description': 'Admin role for {}'.format(projectUuid)\n                },\n                'metadata': {\n                    'kind': 'access_control_policy'\n                },\n                'operation': 'ADD'\n            }\n        access_control_policy_list = acp_list\n    else:\n        _type = 'groups'\n        group_reference_list = []\n        for _user in groups:\n            for us in group_list:\n                if _user in us['name']:\n                    group_reference_list.append(\\\n                        {\"kind\":\"user_group\", \"uuid\": us['uuid']})\n        acp_list = {\n            'acp': {\n                'name': 'ACP-TENANT-{}-{}'.format(role, _type),\n                'resources': {\n                    'role_reference': {\n                        'kind': 'role',\n                        'uuid': role_uuid\n                        },\n                         \"user_group_reference_list\": group_reference_list,\n                         \"filter_list\": {'context_list': filter_list}\n                    },\n                    'description': 'Admin role for {}'.format(projectUuid)\n                },\n                'metadata': {\n                    'kind': 'access_control_policy'\n                },\n                'operation': 'ADD'\n            }\n        access_control_policy_list = acp_list\n    return access_control_policy_list\n  \ndef _get_user_spec():\n    return ({\n        \"api_version\": \"3.1.0\",\n        \"metadata\": {\n            \"kind\" : \"user\"\n            },\n        \"spec\": {\n            \"resources\": {}\n            }\n        })\n\ndef _get_group_spec():\n    return ({\n              \"api_version\": \"3.1.0\",\n              \"metadata\": {\n                \"kind\": \"user_group\"\n                  },\n             \"spec\": {\n                \"resources\": {\n                      \"directory_service_user_group\": {\n                        \"distinguished_name\": \"\"\n                          }\n                    }\n                  }\n            })\n            \ndef convert_domain_to_ad_path(group_name):\n    path = ''\n    g_name, domain = group_name.split(\"@\")\n    path = \"cn=%s,cn=users\"%g_name\n    for i in domain.split(\".\"):\n        path = path + ',DC={}'.format(i)\n    \n    return path\n    \ndef create_group(group, **params):\n    payload = _get_group_spec()\n    group_name = convert_domain_to_ad_path(group)\n    payload['spec']['resources']['directory_service_user_group']\\\n                    ['distinguished_name'] = group_name\n    url = _build_url(scheme=\"https\",resource_type=\"\/user_groups\")\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)    \n    wait_for_completion(data)\n    \n    if not data.ok:\n        if \"DUPLICATE\" in str(data.json()):\n            url = _build_url(scheme=\"https\",resource_type=\"\/user_groups\/list\")                        \n            data = requests.post(url, json={\"kind\":\"user_group\", \"length\":9999},\n                                 auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                                    \"@@{prism_central_passwd}@@\"),\n                                 timeout=None, verify=False)   \n            if group.split(\"@\")[0] in str(data.json()):\n                for new_data in data.json()['entities']:\n                    if new_data['status']['resources']['display_name'] == group.split(\"@\")[0]:\n                        return {'uuid':new_data['metadata']['uuid'], 'name':group}\n        else:\n            print(\"Error while creating user_group ----> \",data.json()['message_list'])\n            exit(1)\n    else:\n        return {'uuid':data.json()['metadata']['uuid'], 'name':group}    \n            \ndef create_user(user, **params):\n    payload = _get_user_spec()   \n    payload['spec']['resources']['directory_service_user'] = {}\n    payload['spec']['resources']['directory_service_user']\\\n                                ['user_principal_name'] =  user\n\n    payload['spec']['resources']['directory_service_user']\\\n            ['directory_service_reference'] = {}\n    payload['spec']['resources']['directory_service_user']\\\n            ['directory_service_reference']['kind'] = \"directory_service\"\n    payload['spec']['resources']['directory_service_user']\\\n                ['directory_service_reference']['uuid'] = params['directory_uuid']\n                \n    url = _build_url(scheme=\"https\",resource_type=\"\/users\")\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)    \n    \n    wait_for_completion(data)\n\n    if not data.ok:\n        if \"DUPLICATE\" in str(data.json()):\n            _url = _build_url(scheme=\"https\",resource_type=\"\/users\/list\")                        \n            _data = requests.post(_url, json={\"kind\":\"user\", \"length\":9999},\n                                 auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                                    \"@@{prism_central_passwd}@@\"),\n                                 timeout=None, verify=False)   \n            if user in str(_data.json()):\n                for new_data in _data.json()['entities']:\n                    if new_data['status']['name'] == user:\n                        return {'uuid':new_data['metadata']['uuid'], 'name': user}\n        else:\n            print(\"Error while creating user ----> \",data.json()['message_list'])\n            exit(1)\n    else:\n        return {'uuid':data.json()['metadata']['uuid'], 'name': user}\n      \ndef delete_user(**params):\n    project = params['project_details']\n    if project.get('uuid', 'None') == 'None' and project.get('name', 'None') == 'None':\n        print(\"Input Error ----> Please provide project name or project uuid.\")\n    payload = _get_spec(name=project.get('name', None),uuid=project.get('uuid', 'None'))\n    for x in ['categories', 'categories_mapping', 'creation_time', 'last_update_time', 'owner_reference']:\n        del payload['metadata'][x]\n    del payload['status']\n    \n    user_list = []\n    all_users = []\n    if params.get(\"tenant_users\", \"None\") != \"None\":\n        for x in range(len(params['tenant_users'])):\n            all_users.append(params['tenant_users'][x].get(\"admin\",\\\n                      params['tenant_users'][x].get('operator',\\\n                      params['tenant_users'][x].get('developer',\\\n                      params['tenant_users'][x].get('consumer')))))\n        for user in all_users:\n            for _user in user:\n                user_list.append(create_user(_user, **params))\n\n    group_list = []\n    all_groups = []\n    if params.get(\"tenant_group\", \"None\") != \"None\":\n        for x in range(len(params['tenant_group'])):\n            all_groups.append(params['tenant_group'][x].get(\"admin\",\\\n                      params['tenant_group'][x].get('operator',\\\n                      params['tenant_group'][x].get('developer',\\\n                      params['tenant_group'][x].get('consumer')))))\n        for group in all_groups:\n            for _group in group:\n                group_list.append(create_group(_group, **params))\n    \n    if params.get('tenant_users', 'None') != 'None':\n        for _user in all_users:\n            for user in _user:\n                for _index, _policy in enumerate(payload['spec']['access_control_policy_list']):\n                    _policy['operation'] = \"UPDATE\"\n                    for users_list in _policy['acp']['resources']['user_reference_list']:\n                        if user in users_list['name']:\n                            payload['spec']['access_control_policy_list'][_index]\\\n                                ['acp']['resources']['user_reference_list'].remove(users_list)        \n                            \n    if params.get('tenant_group', 'None') != 'None':\n        for _user in all_groups:\n            for user in _user:\n                for _index,_policy in enumerate(payload['spec']['access_control_policy_list']):\n                    _policy['operation'] = \"UPDATE\"\n                    for users_list in _policy['acp']['resources']['user_group_reference_list']:\n                        if user.split('@')[0] in users_list['name']:\n                            payload['spec']['access_control_policy_list'][_index]\\\n                                ['acp']['resources']['user_group_reference_list'].remove(users_list)\n                                \n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects_internal\/{}\".format(project['uuid']))\n    data = requests.put(url, json=payload,\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)\n    wait_for_completion(data)\n\n    payload = _get_project_spec(name=project.get('name', None),\n                uuid=project.get('uuid', 'None'))\n    for x in ['categories', 'categories_mapping', 'creation_time', 'last_update_time', 'owner_reference']:\n        del payload['metadata'][x]\n    del payload['status']\n\n    if params.get('tenant_users', 'None') != 'None':\n        _list = payload['spec']['resources']['user_reference_list']\n        for tenant_users in user_list:\n            for _index, _user in enumerate(_list):\n                if tenant_users['uuid'] == _user['uuid']:\n                    del payload['spec']['resources']\\\n                        ['user_reference_list'][_index]\n\n    if params.get('tenant_group', 'None') != 'None':\n        _list = payload['spec']['resources']['external_user_group_reference_list']\n        for tenant_groups in group_list:\n            for _index, _group in enumerate(_list):\n                if tenant_groups['uuid'] == _group['uuid']:\n                    del payload['spec']['resources']\\\n                            ['external_user_group_reference_list'][_index]\n    print(payload)\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects\/{}\".format(project['uuid']))\n    data = requests.put(url, json=payload,\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)\n    wait_for_completion(data)\n    if \"@@{operation}@@\" == \"delete_user\":\n        print(\"%s, %s user deleted successfully.\"%(params.get('tenant_group'),\n                                                  params.get('tenant_users')))                                       \ndef _get_project_spec(name=None, uuid=None):\n    if uuid != \"None\":\n        url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects\/{}\".format(uuid))\n        data = requests.get(url,\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)\n        return data.json()\n    else:\n        url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects\/{}\".format(name))\n        data = requests.post(url, json={\"kind\": \"project\", \"filter\":\"name==%s\"%name},\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)\n        return data.json()\n      \nparams = @@{user_items}@@\noperation = \"@@{operation}@@\"\nif operation == \"add_user\":\n    update_project(**params)\nelif operation == \"delete_user\":\n    delete_user(**params)\nelif operation == \"update\":\n    delete_user(**params)\n    update_project(**params)","script_type":"static_py3","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"82a50272_dag","kind":"app_task"},"variable_list":[{"type":"LOCAL","name":"PC_IP","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":""},"editables":{"value":true},"value":"10.44.77.68"},{"type":"LOCAL","name":"project_name","description":"Project where users\/groups action needed.","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Project Name","attrs":{"type":""},"editables":{"value":true},"value":""},{"type":"LOCAL","name":"active_directory_domain","description":"Active Directory Domain Name Whitelisted  for Project.","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Active Directory Domain Name","attrs":{"type":""},"editables":{"value":true},"value":""},{"type":"LOCAL","name":"operation","description":"","options":{"type":"PREDEFINED","choices":["add_user","delete_user","update"]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":"LOCAL"},"editables":{"value":true},"value":"add_user"},{"type":"LOCAL","name":"admin_users","description":"If don't have admin users, Keep \"None\" value in the Input field. ","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Admin Users","attrs":{"type":""},"editables":{"value":true},"value":"\"None\""},{"type":"LOCAL","name":"developer_users","description":"If don't have Developer users, Keep \"None\" value in the Input field. ","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Developer Users","attrs":{"type":""},"editables":{"value":true},"value":"\"None\""},{"type":"LOCAL","name":"consumer_users","description":"If don't have Consumer users, Keep \"None\" value in the Input field. ","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Consumer Users","attrs":{"type":""},"editables":{"value":true},"value":"\"None\""},{"type":"LOCAL","name":"operator_users","description":"If don't have Operator users, Keep \"None\" value in the Input field. ","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Operator Users","attrs":{"type":""},"editables":{"value":true},"value":"\"None\""},{"type":"LOCAL","name":"admin_groups","description":"If don't have admin groups, Keep \"None\" value in the Input field. ","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Admin Groups","attrs":{"type":""},"editables":{"value":true},"value":"\"None\""},{"type":"LOCAL","name":"developer_groups","description":"If don't have Developer groups, Keep \"None\" value in the Input field. ","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Developer Groups","attrs":{"type":""},"editables":{"value":true},"value":"\"None\""},{"type":"LOCAL","name":"operator_groups","description":"If don't have Operator Groups, Keep \"None\" value in the Input field. ","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Operator Groups","attrs":{"type":""},"editables":{"value":true},"value":"\"None\""},{"type":"LOCAL","name":"consumer_groups","description":"If don't have Consumer groups, Keep \"None\" value in the Input field. ","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Consumer Groups","attrs":{"type":""},"editables":{"value":true},"value":"\"None\""},{"type":"SECRET","name":"prism_central_username","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":"SECRET","is_secret_modified":false,"secret_reference":{}},"editables":{"value":false},"value":"i8t+Gvcow7lzcxyHi0hWmBLNseuIfsnZO\/MqbezY2CoBNbklEg==:utf-8"},{"type":"SECRET","name":"prism_central_passwd","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":"SECRET","is_secret_modified":false,"secret_reference":{}},"editables":{"value":false},"value":"wlhXgriKvZ4\/99dCXgKl3qWFbD9oejzizmsuRK0TXdALvL2TTYnr2UBoVQ==:utf-8"}]},"endpoint_definition_list":[],"credential_definition_list":[],"endpoints_information":[],"client_attrs":{}}},"api_version":"3.0","product_version":"3.8.0","metadata":{"last_update_time":"1727349012033860","creation_time":"1727348989065914","spec_version":1,"name":"Users and Groups Management New UI","kind":"runbook"},"contains_secrets":true}