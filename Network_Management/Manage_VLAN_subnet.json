{"status":{},"spec":{"name":"Manage_VLAN_subnet","description":"runbook_for_subnet","resources":{"runbook":{"name":"dc151af2_runbook","description":"","task_definition_list":[{"type":"DAG","name":"e45355be_dag","description":"","attrs":{"type":"","edges":[{"type":"","from_task_reference":{"name":"Validate Parameters","kind":"app_task"},"to_task_reference":{"name":"Manage Subnet","kind":"app_task"},"edge_type":"user_defined"}]},"child_tasks_local_reference_list":[{"name":"Validate Parameters","kind":"app_task"},{"name":"Manage Subnet","kind":"app_task"}],"variable_list":[],"timeout_secs":"0","retries":"0","inherit_target":false,"status_map_list":[]},{"type":"SET_VARIABLE","name":"Validate Parameters","description":"","attrs":{"type":"","script":"import requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP =  \"@@{PC_IP}@@\".strip()\npc_username = \"@@{prism_central_username}@@\".strip()\npc_password = \"@@{prism_central_passwd}@@\".strip()\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n  \ndef _get_vlan_id():\n    url = _build_url(scheme=\"https\",resource_type=\"\/subnets\/list\")\n    data = requests.post(url, json={\"kind\":\"subnet\"},\n                         auth=HTTPBasicAuth(pc_username, \n                                            pc_password),\n                         timeout=None, verify=False)\n    if data.ok:\n        vlan_id = []\n        for x in data.json()['entities']:\n            vlan_id.append(x['spec']['resources'].get('vlan_id', 0))\n        id = 10\n        while True:\n            if id in vlan_id:\n                id+=1\n            else:\n                break\n        return id\n    else:\n        print(\"Error while fetching subnet list :- \",data.json().get('message_list',\n                                     data.json().get('error_detail', data.json())))\n        exit(1)\n        \nif \"@@{operation}@@\" in [\"update\", \"delete\"]:\n    if \"@@{vlan_uuid}@@\" == \"NA\":\n        print(\"Input Error :- VLAN UUID is a mandatory parameter\"\\\n            \" for Update and Delete operations.\")\n        exit(1)\n\nvlan_subnet_items = {}\nif \"@@{operation}@@\" != \"delete\":\n    if \"@@{cluster_name}@@\".strip() == \"NA\":\n        print(\"Input Error :- Cluster Name is a mandatory parameter\"\\\n            \" for Create and Update operations.\")\n        exit(1)\n    if \"@@{virtual_switch_name}@@\".strip() == \"NA\":\n        print(\"Input Error :- Virtual Switch Name is a mandatory parameter\"\\\n            \" for Create and Update operations.\")\n        exit(1)\n    network_ip = start_ip = end_ip = \"NA\"\n    domain_search = dns_servers = ['NA']\n    network_prefix = 0\n    if \"\/\" not in \"@@{network_ip}@@\".strip():\n        print(\"Input Error :- Please Provide Network IP and Prefix in below format.\")\n        print(\"Example :- 10.10.10.0\/24\")\n        exit(1)\n    if \"@@{network_ip}@@\".strip() != \"NA\":\n        #print(\"Input Error :- Network Ip with Prefix is a mandatory parameter.\")\n        #exit(1)\n        network_ip, network_prefix = \"@@{network_ip}@@\".split(\"\/\")\n    if \"@@{dns_servers}@@\".strip() != \"NA\":\n    \tdns_servers = \"@@{dns_servers}@@\".strip().split(\",\")\n    IP = \"@@{ip_pools}@@\".strip()\n    if \"-\" not in IP:\n        print(\"Input Error :- Please Provide IP Pool in below format.\")\n        print(\"Example :- 10.10.10.2-10.10.10.8\")\n        exit(1)\n    if IP != \"NA\":\n        start_ip, end_ip = IP.split(\"-\")\n    if \"@@{domain_search}@@\".strip() != \"NA\":\n        domain_search = \"@@{domain_search}@@\".strip().split(\",\")\n    vlan_subnet_items = {\n                      \"vlan_subnet\": {\n                        \"vlan_uuid\" : \"@@{vlan_uuid}@@\",\n                        \"cluster\": {\n                            \"name\": \"@@{cluster_name}@@\".strip()\n                        },\n                        \"virtual_switch_name\": \"@@{virtual_switch_name}@@\".strip(),\n                        \"vlan_id\": @@{vlan_id}@@,\n                        \"ipam\": {\n                            \"dhcp\": {\n                                \"dns_servers\": dns_servers,\n                                \"domain_name\": \"@@{domain_name}@@\".strip(),\n                                \"domain_search\": domain_search,\n                                \"boot_file_name\":\"@@{boot_file_name}@@\".strip(),\n                                \"tftp_server\":\"@@{tftp_server}@@\".strip()\n                              },\n                              \"ip_pools\": [\n                                {\n                                  \"end_ip\": end_ip,\n                                  \"start_ip\": start_ip\n                                }\n                              ],\n                          \"gateway_ip\": \"@@{gateway_ip}@@\".strip(),\n                          \"network_ip\": network_ip,\n                          \"network_prefix\": int(network_prefix)\n      \n                        }\n                      }\n                    }\n                    \nprint(\"vlan_subnet_items={}\".format(vlan_subnet_items))\n","script_type":"static_py3","exit_status":[],"eval_scope":"local","eval_variables":["vlan_subnet_items"]},"child_tasks_local_reference_list":[],"variable_list":[],"timeout_secs":"0","retries":"0","inherit_target":false,"status_map_list":[]},{"type":"EXEC","name":"Manage Subnet","description":"","attrs":{"type":"","script":"#script\n\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP =  \"@@{PC_IP}@@\".strip()\npc_username = \"@@{prism_central_username}@@\".strip()\npc_passwd = \"@@{prism_central_passwd}@@\".strip()\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_virtual_switch_uuid(virtual_switch_name, cluster_uuid):\n\n    # fetch switch using name and cluster uuid\n    payload = {\"entity_type\": \"distributed_virtual_switch\",\n               \"filter_criteria\": \"cluster_configuration_list.cluster_uuid=cs={0};name=={1}\".format(cluster_uuid, virtual_switch_name)}\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/groups\")\n    data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(pc_username, pc_passwd),\n                         verify=False)\n    group_results = []\n    if data.ok:\n        group_results = data.json().get('group_results')\n    if group_results and len(group_results) > 0 and len(group_results[0].get('entity_results', [])) > 0:\n        return group_results[0]['entity_results'][0].get('entity_id')\n    else:\n        print(\"Given virtual switch with name {0} doesn't exist in given cluster. Exiting\".format(virtual_switch_name))\n        exit(1)\n\n\ndef _get_cluster_details(cluster_name):\n    cluster_details = {'kind':'cluster'}\n    payload = {\"kind\": \"cluster\"}\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/clusters\/list\")\n    data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(pc_username,pc_passwd), \n                         verify=False)\n    if data.ok:\n        for _cluster in data.json()['entities']:\n            if _cluster['status']['name'] == cluster_name:\n                cluster_details['uuid'] = str(_cluster['metadata']['uuid'])\n                return cluster_details\n        print(\"Input Error :- Given cluster %s not present on %s\"%(cluster_name, PC_IP))\n        exit(1)\n    else:\n        print(\"Error while fetching %s cluster info\"%cluster_name)\n        print(data.json().get('message_list',data.json().get('error_detail', data.json())))\n        exit(1)  \n\ndef _get_default_spec():\n    return (\n        {\n          \"api_version\": \"3.1.0\",\n          \"metadata\": {\"kind\": \"subnet\"},\n          \"spec\": {\n                  \"name\": \"\",\n                  \"resources\": {\n                      \"ip_config\": {},\n                      \"subnet_type\": None,\n                      },\n                  },\n              }\n          )\n\ndef _get_default_spec_update():\n    return (\n        {\n          \"api_version\": \"3.1.0\",\n          \"metadata\": {\n                        \"spec_version\" : 5,\n                        \"kind\": \"subnet\"\n                      },\n          \"spec\": {\n                  \"name\": \"\",\n                  \"resources\": {\n                      \"ip_config\": {},\n                      \"subnet_type\": None,\n                      },\n                  },\n              }\n          )\n\ndef _get_ipam_spec(**params):\n    ipam_spec = {}\n    if params['set_ipam'] == 'yes':\n        ipam_spec = _get_default_ipconfig_spec()\n        ipam_config = params[\"ipam\"]\n        ipam_spec[\"subnet_ip\"] = ipam_config[\"network_ip\"]\n        ipam_spec[\"prefix_length\"] = ipam_config[\"network_prefix\"]\n        ipam_spec[\"default_gateway_ip\"] = ipam_config[\"gateway_ip\"]\n        if \"ip_pools\" in ipam_config and ipam_config[\"ip_pools\"] != \"NA\":\n            pools = []\n            ipam_spec[\"pool_list\"] = []\n            for ip_pools in ipam_config[\"ip_pools\"]:\n                if (ip_pools.get('start_ip', 'NA') != 'NA') and (ip_pools.get('end_ip', 'NA') != 'NA'):\n                    pools.append({\"range\": \"%s %s\"%(ip_pools['start_ip'],\n                                                    ip_pools['end_ip'])})\n            ipam_spec[\"pool_list\"] = pools\n        if \"dhcp_options\" in ipam_config:\n            dhcp_spec = _get_default_dhcp_spec()\n            dhcp_config = ipam_config[\"dhcp_options\"]\n            if dhcp_config['domain_name_server_list'] != ['NA']: \n                dhcp_spec[\"domain_name_server_list\"] = dhcp_config[\"domain_name_server_list\"]\n            if dhcp_config[\"domain_search_list\"] != ['NA']:\n                dhcp_spec[\"domain_search_list\"] = dhcp_config[\"domain_search_list\"]\n            if dhcp_config[\"domain_name\"] != 'NA':\n                dhcp_spec[\"domain_name\"] = dhcp_config[\"domain_name\"]\n            if dhcp_config[\"boot_file_name\"] != 'NA':\n              dhcp_spec[\"boot_file_name\"] = dhcp_config[\"boot_file_name\"]\n            if dhcp_config[\"tftp_server_name\"] != 'NA':\n                dhcp_spec[\"tftp_server_name\"] = dhcp_config[\"tftp_server_name\"]\n            ipam_spec[\"dhcp_options\"] = dhcp_spec\n    return ipam_spec\n\ndef _get_default_ipconfig_spec():\n    return (\n        {\n         \"subnet_ip\": None,\n         \"prefix_length\": 0,\n         \"default_gateway_ip\": None,\n        }\n      )\n\ndef _get_default_dhcp_spec():\n    return (\n      {\n        \"domain_name_server_list\": [],\n        \"domain_search_list\": [],\n        \"domain_name\": \"\",\n                \"boot_file_name\": \"\",\n                \"tftp_server_name\": \"\",\n       }\n    )\n\ndef get_params(**params):\n    params['cluster_reference'] = _get_cluster_details(\n                                    cluster_name=params['cluster_name'])\n    params['virtual_switch_uuid'] = params.get('virtual_switch_uuid',\\\n                _get_virtual_switch_uuid(params['Virtual_switch_name'],\n                                         params['cluster_reference']['uuid']))\n    payload = _get_default_spec()\n    if params['ipam']['network_ip'] != \"NA\":\n        params['ipam_spec'] = _get_ipam_spec(**params)\n        payload[\"spec\"][\"resources\"][\"ip_config\"] = params['ipam_spec']\n    payload[\"spec\"]['name'] = \"@@{vlan_name}@@\".strip()\n    payload[\"spec\"][\"resources\"][\"subnet_type\"] = \"VLAN\"\n    payload[\"spec\"][\"resources\"][\"vlan_id\"] = params['vlan_id']\n    payload[\"spec\"][\"resources\"][\"is_external\"] = False\n    payload[\"spec\"][\"resources\"][\"virtual_switch_uuid\"] = params['virtual_switch_uuid']\n    payload[\"spec\"][\"cluster_reference\"] = params['cluster_reference']\n    return payload\n  \ndef vlan_subnet(**params):\n    payload = get_params(**params)\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\")        \n    data = requests.post(url, json=payload,\n                             auth=HTTPBasicAuth(pc_username, pc_passwd),\n                             timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"%s subnet created successfully\"%payload[\"spec\"]['name'])\n    print(\"Please note UUID for future reference :- %s\"%data.json()[\"metadata\"][\"uuid\"])\n\ndef update_subnet(**payload):\n    _uuid = \"\"\n    _spec = \"\"\n    if payload[\"vlan_uuid\"] == \"NA\" or payload[\"vlan_uuid\"] == \"\" :\n        print(\"Input Error :- Please Provide proper UUID of %s subnet to update it.\"%payload['subnet_name'])\n        print(\"Your provided UUID :- %s\"%payload[\"vlan_uuid\"])\n        exit(1)\n    else:\n        _url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%payload[\"vlan_uuid\"])\n        _data = requests.get(_url, auth=HTTPBasicAuth(pc_username, pc_passwd),verify=False)\n        if _data.ok:\n            if _data.json()['spec']['name'] != payload['subnet_name']:\n                print(\"Input Error :- Provided UUID %s does not match with provided \"\\\n                    \"VLAN name %s\"%(payload[\"vlan_uuid\"], payload['subnet_name']))\n                exit(1)\n            else:\n                _uuid = payload[\"vlan_uuid\"]\n                _spec = _data.json()\n        else:\n            print(_data.json().get('message_list',_data.json().get('error_detail', _data.json())))\n            exit(1)\n\n    del payload[\"vlan_uuid\"]\n    _params = {}\n    del _spec[\"status\"]\n    for x in [\"last_update_time\", \"creation_time\", \"spec_hash\", \"categories_mapping\", \"owner_reference\", \"categories\"]:\n        del _spec[\"metadata\"][x]\n        \n    _payload = get_params(**payload)\n    _spec[\"spec\"] = _payload[\"spec\"]\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%_uuid)\n    data = requests.put(url, json=_spec,\n                         auth=HTTPBasicAuth(pc_username, pc_passwd),\n                         timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"%s subnet updated successfully\"%payload['subnet_name'])\n\ndef delete_subnet(**params):\n    _uuid = \"\"\n    if params[\"vlan_uuid\"] == \"NA\" or params[\"vlan_uuid\"] == \"\" :\n        print(\"Input Error :- Please Provide proper UUID of %s subnet to update it.\"%params['subnet_name'])\n        print(\"Your provided UUID :- %s\"%params[\"vlan_uuid\"])\n        exit(1)\n    else:\n        _url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%params[\"vlan_uuid\"])\n        _data = requests.get(_url, auth=HTTPBasicAuth(pc_username, pc_passwd),verify=False)\n        if _data.ok:\n            if _data.json()['spec']['name'] != params['subnet_name']:\n                print(\"Input Error :- Provided UUID %s does not match with provided \"\\\n                    \"VLAN name %s\"%(params[\"vlan_uuid\"], params['subnet_name']))\n                exit(1)\n            else:\n                _uuid = params[\"vlan_uuid\"]\n        else:\n            print(_data.json().get('message_list',_data.json().get('error_detail', _data.json())))\n            exit(1)\n\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%_uuid)\n    data = requests.delete(url, auth=HTTPBasicAuth(pc_username, pc_passwd),\n                            timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"%s subnet deleted successfully\"%params['subnet_name'])\n\ndef wait_for_completion(data):\n    if data.status_code in [200, 202]:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(pc_username,pc_passwd), \n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(responce.json().get('message_list',responce.json().get(\\\n                                          'error_detail', responce.json())))\n                state = 'FAILED'\n                exit(1)  \n                \n            else:\n                state = \"COMPLETE\"\n    else:\n        print(data.json().get('message_list',data.json().get('error_detail', data.json())))\n        exit(1)  \n            \ndef validate_params():\n    params = @@{vlan_subnet_items}@@\n    operation = \"@@{operation}@@\"\n    params['subnet_name'] = \"@@{vlan_name}@@\".strip()\n    params[\"vlan_uuid\"]  = \"@@{vlan_uuid}@@\"\n    if operation == \"delete\":\n        delete_subnet(**params)\n    else:\n        params['ipam'] = {}\n        params['set_ipam'] = \"no\"\n        if 'ipam' in params['vlan_subnet'] and params['vlan_subnet']['ipam'] != {}:\n            params['set_ipam'] = \"yes\"\n            params['ipam']['network_ip'] = params['vlan_subnet']['ipam']['network_ip']\n            params['ipam']['network_prefix'] = params['vlan_subnet']['ipam']['network_prefix']\n            params['ipam']['gateway_ip'] = params['vlan_subnet']['ipam']['gateway_ip']\n            params['cluster_name'] = params['vlan_subnet']['cluster']['name']\n            params['Virtual_switch_name'] = params['vlan_subnet']['virtual_switch_name']\n            params['vlan_id'] = params['vlan_subnet']['vlan_id']\n            params['ipam']['ip_pools'] = {}\n            params['ipam']['ip_pools'] = params['vlan_subnet']['ipam'].get('ip_pools', \"NA\")\n            if 'dhcp' in params['vlan_subnet']['ipam'] and params['vlan_subnet']['ipam']['dhcp'] != {}:\n                params['ipam']['dhcp_options'] = {}\n                params['ipam']['dhcp_options']['domain_name_server_list'] = params['vlan_subnet']['ipam']['dhcp']['dns_servers']\n                params['ipam']['dhcp_options']['domain_search_list'] = params['vlan_subnet']['ipam']['dhcp']['domain_search']\n                params['ipam']['dhcp_options']['domain_name'] = params['vlan_subnet']['ipam']['dhcp']['domain_name']\n                params['ipam']['dhcp_options']['boot_file_name'] = params['vlan_subnet']['ipam']['dhcp'].get('boot_file_name', \"NA\")\n                params['ipam']['dhcp_options']['tftp_server_name'] = params['vlan_subnet']['ipam']['dhcp'].get('tftp_server', \"NA\")\n                params['ipam']['dhcp_options']['dhcp_server_ip'] = params['vlan_subnet']['ipam']['dhcp'].get('dhcp_server_ip', \"NA\")\n        if operation == \"update\":\n            update_subnet(**params)\n        else:\n            print(\"reached here\")\n            vlan_subnet(**params)\n\nvalidate_params()\n","script_type":"static_py3","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"timeout_secs":"0","retries":"0","inherit_target":false,"status_map_list":[]}],"main_task_local_reference":{"name":"e45355be_dag","kind":"app_task"},"variable_list":[{"type":"LOCAL","name":"vlan_name","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Subnet Name","attrs":{"type":""},"editables":{"value":true},"value":"vlan_uat"},{"type":"LOCAL","name":"vlan_id","description":"# Required for Create and Update operations.","regex":{"value":"^[\\d]*$","should_validate":false},"options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"INT","label":"VLAN ID","attrs":{"type":""},"editables":{"value":true},"value":"31"},{"type":"LOCAL","name":"operation","description":"","options":{"type":"PREDEFINED","choices":["create","update","delete"]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Operation","attrs":{"type":""},"editables":{"value":true},"value":"create"},{"type":"LOCAL","name":"cluster_name","description":"# Optional : Not required for Delete Operation.","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Cluster Name","attrs":{"type":""},"editables":{"value":true},"value":"auto_cluster_prod_f6a56cf7a889"},{"type":"LOCAL","name":"virtual_switch_name","description":"# Optional : Not required for Delete Operation.","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Virtual Switch Name","attrs":{"type":""},"editables":{"value":true},"value":"vs0"},{"type":"LOCAL","name":"vlan_uuid","description":"# Required for update and Delete operation.","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"VLAN UUID","attrs":{"type":""},"editables":{"value":true},"value":"0cc78887-240b-43d4-8b8b-46d2f17d072f"},{"type":"LOCAL","name":"network_ip","description":"# Optional : Not required for Delete Operation.\nEX :- 10.10.10.0\/24","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Network IP With Prefix","attrs":{"type":""},"editables":{"value":true},"value":"10.10.60.0\/24"},{"type":"LOCAL","name":"gateway_ip","description":"# Optional : Not required for Delete Operation.\nEX :- 10.10.10.1","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Gateway IP","attrs":{"type":""},"editables":{"value":true},"value":"10.10.60.1"},{"type":"LOCAL","name":"ip_pools","description":"# Optional : Not required for Delete Operation.\nEX :- 10.10.10.10-10.10.10.20","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"IP Pools Range","attrs":{"type":""},"editables":{"value":true},"value":"10.10.60.2-10.10.60.10"},{"type":"LOCAL","name":"tftp_server","description":"# Optional : Not required for Delete Operation.\nEX :- tftp.server.com","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"TFTP Server","attrs":{"type":""},"editables":{"value":true},"value":"tft.server.com"},{"type":"LOCAL","name":"boot_file_name","description":"# Optional : Not required for Delete Operation.\nEX :- bootfile.com","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Boot File Name","attrs":{"type":""},"editables":{"value":true},"value":"boot.file.name"},{"type":"LOCAL","name":"domain_search","description":"# Optional : Not required for Delete Operation.\nEX :- dns.server.com","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Domain Search List","attrs":{"type":""},"editables":{"value":true},"value":"dns.server.com"},{"type":"LOCAL","name":"domain_name","description":"# Optional : Not required for Delete Operation.\nEX :- dns.domain.com","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Domain Name","attrs":{"type":""},"editables":{"value":true},"value":"domain.io.com"},{"type":"LOCAL","name":"dns_servers","description":"# Optional : Not required for Delete Operation.\nEx :- 1.2.3.4,5.3.3.3","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"DNS Servers IP","attrs":{"type":""},"editables":{"value":true},"value":"1.2.3.4"},{"type":"LOCAL","name":"PC_IP","description":"Prism Central IP","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"PC IP","attrs":{"type":""},"editables":{"value":true},"value":"10.44.76.16"},{"type":"SECRET","name":"prism_central_username","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"PC Username","attrs":{"type":"SECRET","is_secret_modified":false,"secret_reference":{}},"editables":{"value":true},"value":"PkVbEosrAijorxsgbb8OcDoriFsQv3gy5DxGFz5ijONFhnogqg==:utf-8"},{"type":"SECRET","name":"prism_central_passwd","description":"","regex":{"value":"^.*$","should_validate":false},"options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"PC Password","attrs":{"type":"SECRET","is_secret_modified":false,"secret_reference":{}},"editables":{"value":true},"value":"buO\/ZSj59WNruyBUBlESBtWfvdOIvybY+eRfnBj\/s2hELVB29TP84LJ6HA==:utf-8"}]},"endpoint_definition_list":[],"credential_definition_list":[],"endpoints_information":[],"client_attrs":{}}},"api_version":"3.0","product_version":"4.0.0","metadata":{"last_update_time":"1739212600687714","creation_time":"1739210991459742","spec_version":7,"name":"Manage_VLAN_subnet","kind":"runbook"},"contains_secrets":true}
