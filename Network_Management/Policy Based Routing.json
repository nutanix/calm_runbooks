{"status":{},"spec":{"name":"Policy Based Routing","description":"","resources":{"runbook":{"name":"cb404d1c_runbook","description":"","task_definition_list":[{"type":"DAG","name":"10318349_dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[{"name":"Manage Policy Based Routing","kind":"app_task"}],"variable_list":[],"timeout_secs":"0","retries":"0","inherit_target":false,"status_map_list":[]},{"type":"EXEC","name":"Manage Policy Based Routing","description":"","attrs":{"type":"","script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP = \"@@{PC_IP}@@\".strip()\npc_username = \"@@{prism_central_username}@@\".strip()\npc_password = \"@@{prism_central_passwd}@@\".strip()\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_default_spec(vpc_uuid):\n    priority = @@{priority}@@\n    return ({\n            \"spec\": {\n                \"name\": \"Policy with priority%s\"%str(priority),\n                \"resources\": {\n                    \"priority\": priority,\n                    \"source\": {},\n                    \"destination\": {},\n                    \"protocol_type\": \"@@{protocol_type}@@\".strip(),\n                    \"action\": {\n                        \"action\": \"@@{action}@@\"\n                    },\n                    \"vpc_reference\": {\n                        \"kind\": \"vpc\",\n                        \"uuid\": vpc_uuid\n                    }\n                }\n            },\n            \"metadata\": {\n                \"kind\": \"routing_policy\"\n            },\n            \"api_version\": \"3.1.0\"\n        })\n  \ndef _get_vpc_details(vpc_name):\n    vpc_details = {\"kind\": \"vpc\"}\n    if vpc_name.lower() not in [\"na\", \"none\"]:\n        vpc_details[\"filter\"] = \"name=={}\".format(vpc_name)\n        url = _build_url(\n                    scheme=\"https\",\n                    resource_type=\"\/vpcs\/list\")               \n        data = requests.post(url, json=vpc_details,\n                         auth=HTTPBasicAuth(pc_username, pc_password),\n                         verify=False)\n        if data.ok:\n            for _vpc in data.json()['entities']:\n                if _vpc['spec']['name'] == vpc_name:\n                    return _vpc['metadata']['uuid']\n            print(\"Input Error ---> %s VPC not present on host\"%vpc_name)\n            exit(1)\n        else:\n            print(\"Input Error ---> %s VPC not present on host\"%vpc_name)\n            exit(1)\n    else:\n        print(\"Input Error :-- VPC name should not be NA or None\")\n        exit(1)\n          \ndef create_policy_routing(**params):\n    vpc_uuid = _get_vpc_details(params[\"vpc_name\"])\n    payload = _get_default_spec(vpc_uuid)\n    \n    if (params[\"source_ip_prefix\"] != None) and (\"@@{source_address_type}@@\" == \"CUSTOM\"):\n        s_ip, s_prefix = params[\"source_ip_prefix\"].split(\"\/\")\n        payload[\"spec\"][\"resources\"][\"source\"] = {\"ip_subnet\":{\"ip\":s_ip,\n                                                 \"prefix_length\":int(s_prefix)}}\n    else:\n        payload[\"spec\"][\"resources\"][\"source\"][\"address_type\"] = \"@@{source_address_type}@@\".strip()\n        \n    if (params[\"dest_ip_prefix\"] != None) and (\"@@{dest_address_type}@@\" == \"CUSTOM\"):\n        d_ip, d_prefix = params[\"dest_ip_prefix\"].split(\"\/\")\n        payload[\"spec\"][\"resources\"][\"destination\"] = {\"ip_subnet\":{\"ip\":d_ip,\n                                                      \"prefix_length\":int(d_prefix)}}\n    else:\n        payload[\"spec\"][\"resources\"][\"destination\"][\"address_type\"] = \"@@{dest_address_type}@@\".strip()\n        \n    if (\"@@{protocol_type}@@\" == \"PROTOCOL_NUMBER\") and (@@{protocol_number}@@ != 0):\n        payload[\"spec\"][\"resources\"][\"protocol_parameters\"] = \\\n                            {\"protocol_number\": @@{protocol_number}@@}\n      \n    if \"@@{action}@@\" == \"REROUTE\":\n        payload[\"spec\"][\"resources\"][\"action\"][\"service_ip_list\"] = [\"@@{service_ip_list}@@\".strip()]\n        \n    if @@{bidirection}@@:\n        payload[\"spec\"][\"resources\"][\"is_bidirectional\"] = True\n        \n    if \"@@{protocol_type}@@\" == \"ICMP\":\n        if \"@@{icmp_protocol_parameter_type}@@\".strip().lower() not in [\"na\", \"none\", \"any\", \"\"]:\n            payload[\"spec\"][\"resources\"][\"protocol_parameters\"] = {}\n            payload[\"spec\"][\"resources\"][\"protocol_parameters\"][\"icmp\"] = {}\n            if \"@@{icmp_protocol_parameter_code}@@\".strip().lower() not in [\"na\", \"none\", \"any\", \"\"]:\n                payload[\"spec\"][\"resources\"][\"protocol_parameters\"][\"icmp\"][\"icmp_code\"] = \\\n                                            int(\"@@{icmp_protocol_parameter_code}@@\".strip())\n                \n            payload[\"spec\"][\"resources\"][\"protocol_parameters\"][\"icmp\"][\"icmp_type\"] = \\\n                                            int(\"@@{icmp_protocol_parameter_type}@@\".strip())\n    \n    if \"@@{protocol_type}@@\" in [\"TCP\", \"UDP\"]:\n        _protocol = \"tcp\"\n        if \"@@{protocol_type}@@\" == \"UDP\":\n            _protocol = \"udp\"\n        payload[\"spec\"][\"resources\"][\"protocol_parameters\"] = {_protocol:{}}\n        if \"@@{source_port_range_list}@@\".strip().lower() not in [\"\", \"na\", \"none\"]:\n            start_port = end_port = \"@@{source_port_range_list}@@\".strip()\n            if \"-\" in \"@@{source_port_range_list}@@\":\n                start_port, end_port = \"@@{source_port_range_list}@@\".split(\"-\")\n            payload[\"spec\"][\"resources\"][\"protocol_parameters\"][_protocol][\"source_port_range_list\"] = []\n            payload[\"spec\"][\"resources\"][\"protocol_parameters\"][_protocol]\\\n                [\"source_port_range_list\"].append({\"start_port\": int(start_port.strip()), \n                                                   \"end_port\": int(end_port.strip())})\n            \n        if \"@@{destination_port_range_list}@@\".strip().lower() not in [\"\", \"na\", \"none\"]:\n            start_port = end_port = \"@@{destination_port_range_list}@@\".strip()\n            if \"-\" in \"@@{destination_port_range_list}@@\":\n                start_port, end_port = \"@@{destination_port_range_list}@@\".split(\"-\")\n            payload[\"spec\"][\"resources\"][\"protocol_parameters\"][_protocol][\"destination_port_range_list\"] = []\n            payload[\"spec\"][\"resources\"][\"protocol_parameters\"][_protocol]\\\n                [\"destination_port_range_list\"].append({\"start_port\": int(start_port.strip()),\n                                                        \"end_port\": int(end_port.strip())})\n            \n        if payload[\"spec\"][\"resources\"][\"protocol_parameters\"][_protocol] == {}:\n            del payload[\"spec\"][\"resources\"][\"protocol_parameters\"]\n            \n    pprint(payload)\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/routing_policies\")\n    data = requests.post(url, json=payload, \n                        auth=HTTPBasicAuth(pc_username, pc_password),\n                        timeout=None, verify=False)\n    wait_for_completion(data)\n\ndef delete_policy_routing():\n    vpc_uuid = _get_vpc_details(\"@@{vpc_name}@@\".strip())\n    priority = @@{priority}@@\n    policy_name = \"Policy with priority%s\"%str(priority)\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/routing_policies\/list\")\n    data = requests.post(url, json={\"kind\":\"routing_policy\"},\n                         auth=HTTPBasicAuth(pc_username, pc_password), \n                         verify=False)\n    uuid = \"\"\n    if data.ok:\n        if policy_name in str(data.json()[\"entities\"]):\n            for _policy in data.json()[\"entities\"]:\n                if (_policy[\"spec\"][\"resources\"][\"priority\"] == priority) and \\\n                        (_policy[\"spec\"][\"resources\"][\"vpc_reference\"][\"uuid\"] == vpc_uuid):\n                    uuid = _policy[\"metadata\"][\"uuid\"]\n        else:\n            print(\"Input Error :-- Routing policy with %s priority does not exists \"\\\n                  \"for @@{vpc_name}@@ VPC.\"%str(priority))\n            exit(1)\n    else:\n        print(\"Error while fetching policy details with priority - %s.\"%str(priority))\n        print(data.json())\n        exit(1)\n        \n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/routing_policies\/%s\"%uuid)\n    data = requests.delete(url, auth=HTTPBasicAuth(pc_username, pc_password), \n                           verify=False)\n    wait_for_completion(data)\n    \ndef wait_for_completion(data):\n    if data.ok:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            response = requests.get(url, auth=HTTPBasicAuth(pc_username, pc_password), \n                                    verify=False)\n            if response.json()['status'] in ['PENDING', 'RUNNING', 'DELETE_PENDING']:\n                state = 'PENDING'\n                sleep(5)                \n            elif response.json()['status'] == 'FAILED':\n                print(\"Error while Routing Policy Opearion---> \",response.json())\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = 'SUCCESSED'\n    else:\n        state = data.json().get('state')\n        print(\"Error while Routing Policy Operation --->\",data.json())\n        exit(1)\n\npriority = @@{priority}@@\nif (priority < 10) or (priority > 1000):\n    print(\"Input Erorr :-- Priority Should be between 10 and 1000.\")\n    exit(1)\n    \nif \"@@{operation}@@\" == \"CREATE\":\n    source_ip_prefix = \"@@{source_ip_prefix}@@\".strip()\n    if source_ip_prefix.lower() not in [\"\", \"na\", \"none\"]:\n        if \"\/\" in source_ip_prefix:\n            ip, prefix = source_ip_prefix.split(\"\/\")\n            if len(ip.split(\".\")) != 4:\n                print(\"Input Error :-- Please provide Source IP with Prefix in correct format as below.\")\n                print(\"Example := 10.10.10.0\/24\")\n                exit(1)\n        else:\n            print(\"Input Error :-- Please provide Source IP with Prefix in correct format as below.\")\n            print(\"Example := 10.10.10.0\/24\")\n            exit(1)\n    else:\n        source_ip_prefix = None\n    \n    dest_ip_prefix = \"@@{destination_ip_prefix}@@\".strip()\n    if dest_ip_prefix.lower() not in [\"\", \"na\", \"none\"]:\n        if \"\/\" in dest_ip_prefix:\n            ip, prefix = dest_ip_prefix.split(\"\/\")\n            if len(ip.split(\".\")) != 4:\n                print(\"Input Error :-- Please provide Destination IP with Prefix in correct format as below.\")\n                print(\"Example := 10.10.10.0\/24\")\n                exit(1)\n        else:\n            print(\"Input Error :-- Please provide Destination IP with Prefix in correct format as below.\")\n            print(\"Example := 10.10.10.0\/24\")\n            exit(1)\n    else:\n        dest_ip_prefix = None\n    \n    if \"@@{action}@@\" == \"REROUTE\":\n        if \"@@{service_ip_list}@@\".lower() in [\"\", \"na\", \"none\"]:\n            print(\"Input Error :-- Service IP for REROUTE should not be NA, None or empty for Action=REROUTE\")\n            print(\"Please provide IP in correct format. IE : 10.10.10.10\")\n            exit(1)\n\n    if (\"@@{protocol_type}@@\" == \"PROTOCOL_NUMBER\") and (@@{protocol_number}@@ == 0):\n        print(\"Input Error :-- PROTOCOL NUMBER should not be Zero [ 0 ].\")\n        exit(1)\n    \n    params = {\n              \"vpc_name\":\"@@{vpc_name}@@\".strip(),\n              \"source_ip_prefix\": source_ip_prefix,\n              \"dest_ip_prefix\": dest_ip_prefix\n             }\n    print(\"##### Createing Policy based routing for %s VPC #####\"%params[\"vpc_name\"])\n    create_policy_routing(**params)\n    print(\"Success !!!\")\nelse:\n    print(\"##### Deleting Policy based routing with %s Priority #####\"%priority)\n    try:\n        delete_policy_routing()\n        print(\"Success !!!\")\n    except Exception as e:\n        print(\"Failed to delete policy based route of VPC.\")\n        raise(e)   \n","script_type":"static_py3","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"timeout_secs":"0","retries":"0","inherit_target":false,"status_map_list":[]}],"main_task_local_reference":{"name":"10318349_dag","kind":"app_task"},"variable_list":[{"type":"LOCAL","name":"operation","description":"","options":{"type":"PREDEFINED","choices":["CREATE","DELETE"]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Operation","attrs":{"type":"LOCAL"},"editables":{"value":true},"value":"DELETE"},{"type":"LOCAL","name":"priority","description":"should be Between 10 to 1000.  Delete operation dependent only on \"Priority\" and \"VPC Name\", No other information required.","regex":{"value":"^[\\d]*$","should_validate":false},"options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"INT","label":"Priority of route","attrs":{"type":""},"editables":{"value":true},"value":"12"},{"type":"LOCAL","name":"protocol_type","description":"Choose \"ALL\" for Any.","options":{"type":"PREDEFINED","choices":["TCP","UDP","ALL","ICMP","PROTOCOL_NUMBER"]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Protocol Type","attrs":{"type":"LOCAL"},"editables":{"value":true},"value":"TCP"},{"type":"LOCAL","name":"protocol_number","description":"Mandatory if Protocol Type = \"PROTOCOL NUMBER\".    EX :- 80.  Note - Keep 0 for other Protocol Types.","regex":{"value":"^[\\d]*$","should_validate":false},"options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"INT","label":"Protocol Number ","attrs":{"type":""},"editables":{"value":true},"value":"0"},{"type":"LOCAL","name":"icmp_protocol_parameter_type","description":"# Only for ICMP Protocol. Example :- 12, 13, None, NA","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"ICMP Protocol Parameter Type","attrs":{"type":""},"editables":{"value":true},"value":"None"},{"type":"LOCAL","name":"icmp_protocol_parameter_code","description":"# Only for ICMP Protocol. Example :- 12, 13, None, NA\n","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"ICMP Protocol Parameter Code","attrs":{"type":""},"editables":{"value":true},"value":"None"},{"type":"LOCAL","name":"source_port_range_list","description":"# Only for TCP and IDP Protocol. Example :- 21-56","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Source Port Range List","attrs":{"type":""},"editables":{"value":true},"value":"None"},{"type":"LOCAL","name":"destination_port_range_list","description":"# Only for TCP and IDP Protocol. Example :- 21-56","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Destination Port Range List","attrs":{"type":""},"editables":{"value":true},"value":"None"},{"type":"LOCAL","name":"source_address_type","description":"Choose \"INTERNET\" for \"External\", \"ALL\" for \"Any\" and \"CUSTOM\" for Custom.","options":{"type":"PREDEFINED","choices":["INTERNET","ALL","CUSTOM"]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Source Address Type","attrs":{"type":"LOCAL"},"editables":{"value":true},"value":"INTERNET"},{"type":"LOCAL","name":"source_ip_prefix","description":"Mandatory if Source Address Type = \"CUSTOM\".  \n Ex :- 10.10.10.0\/24","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Source IP Prefix","attrs":{"type":""},"editables":{"value":true},"value":""},{"type":"LOCAL","name":"dest_address_type","description":"Choose \"INTERNET\" for \"External\", \"ALL\" for \"Any\" and \"CUSTOM\" for Custom.","options":{"type":"PREDEFINED","choices":["INTERNET","ALL","CUSTOM"]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Destination Address Type","attrs":{"type":"LOCAL"},"editables":{"value":true},"value":"INTERNET"},{"type":"LOCAL","name":"destination_ip_prefix","description":"Mandatory if Destination Address Type = \"CUSTOM\".    Ex :- 10.10.10.0\/24","regex":{"value":"[0-9]","should_validate":false},"options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Destination IP with Prefix","attrs":{"type":""},"editables":{"value":true},"value":"10.10.40.0\/24"},{"type":"LOCAL","name":"action","description":"","regex":{"value":"^.*$","should_validate":false},"options":{"type":"PREDEFINED","choices":["PERMIT","DENY","REROUTE"]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Action","attrs":{"type":"LOCAL"},"editables":{"value":true},"value":"PERMIT"},{"type":"LOCAL","name":"service_ip_list","description":"This is mandatory if Action is \"REROUTE\". Ex:- 10.10.10.10","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Service IP for REROUTE","attrs":{"type":""},"editables":{"value":true},"value":""},{"type":"LOCAL","name":"vpc_name","description":"For which routing operation needed.","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"VPC Name","attrs":{"type":""},"editables":{"value":true},"value":"test_vpc"},{"type":"LOCAL","name":"bidirection","description":"","options":{"type":"PREDEFINED","choices":["True","False"]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Bi-Directional","attrs":{"type":"LOCAL"},"editables":{"value":true},"value":"True"},{"type":"LOCAL","name":"PC_IP","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"PC IP","attrs":{"type":""},"editables":{"value":true},"value":"10.42.244.10"},{"type":"SECRET","name":"prism_central_passwd","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Prism Central Password","attrs":{"type":"SECRET","is_secret_modified":false,"secret_reference":{}},"editables":{"value":true},"value":"t2lBolW+sk3hY3QPbwOHtXRfoAxcQ1QVzARSvsVXbbX2bRDnf05e\/gk89Q==:utf-8"},{"type":"SECRET","name":"prism_central_username","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Prism Central Username","attrs":{"type":"SECRET","is_secret_modified":false,"secret_reference":{}},"editables":{"value":true},"value":"XYzt68uLPU+nSRDXC5MzAK3LOdl8tjUXTZyzY6tAN0RCgnBNCg==:utf-8"}]},"endpoint_definition_list":[],"credential_definition_list":[],"endpoints_information":[],"client_attrs":{}}},"api_version":"3.0","product_version":"4.0.0","metadata":{"last_update_time":"1740335315765131","creation_time":"1740334531708641","spec_version":2,"name":"Policy Based Routing","kind":"runbook"},"contains_secrets":true}
