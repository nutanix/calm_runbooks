{"status":{},"spec":{"name":"VPC Static Routing","description":"","resources":{"runbook":{"name":"cb404d1c_runbook","description":"","task_definition_list":[{"type":"DAG","name":"10318349_dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[{"name":"Update VPC Static Route","kind":"app_task"}],"variable_list":[],"timeout_secs":"0","retries":"0","inherit_target":false,"status_map_list":[]},{"type":"EXEC","name":"Update VPC Static Route","description":"","attrs":{"type":"","script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP = \"@@{PC_IP}@@\".strip()\npc_username = \"@@{prism_central_username}@@\".strip()\npc_password = \"@@{prism_central_passwd}@@\".strip()\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_default_spec(vpc_uuid, subnet_uuid, ip_prefix):\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/vpcs\/%s\/route_tables\"%vpc_uuid)\n    data = requests.get(url, auth=HTTPBasicAuth(pc_username, pc_password), verify=False)\n    if data.ok:\n        response = data.json()\n        del response[\"status\"]\n        for x in [\"last_update_time\",\"creation_time\",\"spec_hash\",\"categories_mapping\",\"owner_reference\",\"categories\"]:\n            if x in response[\"metadata\"].keys():\n                del response[\"metadata\"][x]\n    else:\n        print(\"Error while fetching @@{vpc_name}@@ VPCs static route details.\")\n        exit(1)\n    static_route = {\"nexthop\": {\n                        \"external_subnet_reference\": {\n                            \"kind\": \"subnet\",\n                            \"name\": \"@@{external_subnet_name}@@\".strip(),\n                            \"uuid\": subnet_uuid\n                        }\n                    },\n                    \"destination\": ip_prefix}\n    response[\"spec\"][\"resources\"][\"static_routes_list\"].append(static_route)\n    return response\n\ndef _get_delete_spec(vpc_uuid, subnet_uuid, ip_prefix):\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/vpcs\/%s\/route_tables\"%vpc_uuid)\n    data = requests.get(url, auth=HTTPBasicAuth(pc_username, pc_password), verify=False)\n    if data.ok:\n        response = data.json()\n        del response[\"status\"]\n        for x in [\"last_update_time\",\"creation_time\",\"spec_hash\",\"categories_mapping\",\"owner_reference\",\"categories\"]:\n            if x in response[\"metadata\"].keys():\n                del response[\"metadata\"][x]\n    else:\n        print(\"Error while fetching @@{vpc_name}@@ VPCs static route details.\")\n        exit(1)\n\n    for x,_route in enumerate(response[\"spec\"][\"resources\"][\"static_routes_list\"]):\n        if (_route[\"destination\"] == ip_prefix) and (_route[\"nexthop\"][\"external_subnet_reference\"][\"uuid\"] == subnet_uuid):\n            del response[\"spec\"][\"resources\"][\"static_routes_list\"][x]\n            return response\n    print(\"Input Error :-- @@{ip_prefix}@@ IP prefix with \"\\\n          \"@@{external_subnet_name}@@ external subnet not found.\")\n    exit(1)\n  \ndef get_subnet_uuid(subnet):\n    url = _build_url(scheme=\"https\",resource_type=\"\/subnets\/list\")\n    data = requests.post(url, json={\"kind\":\"subnet\", \"filter\":\"name==%s\"%subnet},\n                         auth=HTTPBasicAuth(pc_username, pc_password),\n                         timeout=None, verify=False)\n    if data.ok:\n        if data.json()['metadata']['total_matches'] == 0:\n            print(\"%s not present on %s\"%(subnet, PC_IP))\n            exit(1)\n        elif data.json()['metadata']['total_matches'] > 1:\n            print(\"There are more than one subnets with name - %s on - %s\"%(subnet, PC_IP))\n            print(\"Please delete it manually before executing runbook.\")\n            exit(1)\n        else:\n            return data.json()['entities'][0]['metadata']['uuid']\n    else:\n        print(\"Error while fetching subnet details :- \",data.json().get('message_list',\n                                     data.json().get('error_detail', data.json())))\n        exit(1)\n        \ndef _get_vpc_details(vpc_name):\n    vpc_details = {\"kind\": \"vpc\"}\n    if vpc_name.lower() not in [\"na\", \"none\"]:\n        vpc_details[\"filter\"] = \"name=={}\".format(vpc_name)\n        url = _build_url(\n                    scheme=\"https\",\n                    resource_type=\"\/vpcs\/list\")               \n        data = requests.post(url, json=vpc_details,\n                         auth=HTTPBasicAuth(pc_username, pc_password),\n                         verify=False)\n        if data.ok:\n            for _vpc in data.json()['entities']:\n                if _vpc['status']['name'] == vpc_name:\n                    return _vpc['metadata']['uuid']\n        else:\n            print(\"Input Error ---> %s VPC not present on host\"%vpc_name)\n            exit(1)\n    else:\n        print(\"Input Error :-- VPC name should not be NA or None\")\n        exit(1)\n          \ndef create_static_route(**params):\n    vpc_uuid = _get_vpc_details(params[\"vpc_name\"])\n    subnet_uuid = get_subnet_uuid(params[\"external_subnet\"])\n    payload = _get_default_spec(vpc_uuid, subnet_uuid, params[\"ip_prefix\"])\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/vpcs\/%s\/route_tables\"%vpc_uuid)\n    data = requests.put(url, json=payload, \n                        auth=HTTPBasicAuth(pc_username, pc_password), verify=False)\n    wait_for_completion(data)\n\ndef delete_static_route(**params):\n    vpc_uuid = _get_vpc_details(params[\"vpc_name\"])\n    subnet_uuid = get_subnet_uuid(params[\"external_subnet\"])\n    payload = _get_delete_spec(vpc_uuid, subnet_uuid, params[\"ip_prefix\"])\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/vpcs\/%s\/route_tables\"%vpc_uuid)\n    data = requests.put(url, json=payload, \n                        auth=HTTPBasicAuth(pc_username, pc_password), verify=False)\n    wait_for_completion(data)\n    \ndef wait_for_completion(data):\n    if data.ok:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            response = requests.get(url, auth=HTTPBasicAuth(pc_username, pc_password), \n                                    verify=False)\n            if response.json()['status'] in ['PENDING', 'RUNNING', 'DELETE_PENDING']:\n                state = 'PENDING'\n                sleep(5)                \n            elif response.json()['status'] == 'FAILED':\n                print(\"Error while creating Statis route ---> \",response.json())\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = 'SUCCESSED'\n    else:\n        state = data.json().get('state')\n        print(\"Error while creating Statis route --->\",data.json())\n        exit(1)\n\nip_prefix = \"@@{ip_prefix}@@\".strip()\nif \"\/\" in ip_prefix:\n    ip, prefix = ip_prefix.split(\"\/\")\n    if len(ip.split(\".\")) != 4:\n        print(\"Input Error :-- Please provide IP with Prefix in correct format as below.\")\n        print(\"Example := 10.10.10.0\/24\")\n        exit(1)\nelse:\n    print(\"Input Error :-- Please provide IP with Prefix in correct format as below.\")\n    print(\"Example := 10.10.10.0\/24\")\n    exit(1)\n    \nparams = {\n              \"vpc_name\":\"@@{vpc_name}@@\".strip(),\n              \"external_subnet\":\"@@{external_subnet_name}@@\".strip(),\n              \"ip_prefix\": ip_prefix\n         }\nprint(\"##### Updating Static routes of %s VPC #####\"%params[\"vpc_name\"])\nif \"@@{operation}@@\" == \"UPDATE\":\n    create_static_route(**params)\n    print(\"Success !!!\")\nelse:\n    delete_static_route(**params)\n    print(\"Success !!!\")\n","script_type":"static_py3","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"timeout_secs":"0","retries":"0","inherit_target":false,"status_map_list":[]}],"main_task_local_reference":{"name":"10318349_dag","kind":"app_task"},"variable_list":[{"type":"LOCAL","name":"operation","description":"","options":{"type":"PREDEFINED","choices":["UPDATE","DELETE"]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Operation","attrs":{"type":"LOCAL"},"editables":{"value":true},"value":"UPDATE"},{"type":"LOCAL","name":"vpc_name","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"VPC Name","attrs":{"type":""},"editables":{"value":true},"value":"Nutanix_4_VPC"},{"type":"LOCAL","name":"ip_prefix","description":"Ex :- 10.10.10.0\/24","regex":{"value":"[0-9]","should_validate":false},"options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"IP with Prefix [ Destination ]","attrs":{"type":""},"editables":{"value":true},"value":"10.10.10.0\/24"},{"type":"LOCAL","name":"external_subnet_name","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"External Subnet Name","attrs":{"type":""},"editables":{"value":true},"value":"Nutanix_4_External_Subnet"},{"type":"LOCAL","name":"PC_IP","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"PC IP","attrs":{"type":""},"editables":{"value":true},"value":"10.42.244.10"},{"type":"SECRET","name":"prism_central_passwd","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Prism Central Password","attrs":{"type":"SECRET","is_secret_modified":false,"secret_reference":{}},"editables":{"value":true},"value":"dE2kuPrHFrNL3kr84YzSUQdFL4yoZvslBE0sR1JugpIYPAOHx4UBDmlccg==:utf-8"},{"type":"SECRET","name":"prism_central_username","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Prism Central Username","attrs":{"type":"SECRET","is_secret_modified":false,"secret_reference":{}},"editables":{"value":true},"value":"AEKkTMzOetq0NeKzCEjQ1GJzou6ZRQa3zW1sQtVYQ7I+xindRg==:utf-8"}]},"endpoint_definition_list":[],"credential_definition_list":[],"endpoints_information":[],"client_attrs":{}}},"api_version":"3.0","product_version":"4.0.0","metadata":{"last_update_time":"1740335152969766","creation_time":"1740333115292624","spec_version":4,"name":"VPC Static Routing","kind":"runbook"},"contains_secrets":true}
